library(devtools)
use_r(dbvt)
use_r("dbvt")
library(BSDA)
help("z.test")
library(MASS)
help(mvrnorm)
help(mvrnorm)
help(dnorm)
use_r("rbvt")
library(mvrnorm)
library(MASS)
library(mvrnorm)
help(mvrnorm)
library(RTM)
library(RTM)
library(RTM)
library(RTM)
use_r("RTM.T")
use_r("RTM.T.R")
library(RTM)
help("t.test")
library(PairedData)
anorexia
Anorexia
PairedData::anorexia
data("Anorexia")
data("Anorexia")
data(anorexia)
data("anorexia")
2+2
anorexia
help(anorexia)
help("Anorexia")
PairedData::Anorexia
#load the required packages
library(hypergeo)
library(ggplot2)
library(pracma)
library(PairedData)
data("Anorexia")
#standardized the data and cutoff through z-score
anostd<-scale(Anorexia)
cutoff<-(mean(Anorexia[,1])-95)/sd(Anorexia[,1])
#The negative log-likelihood function to estimate theta
NLL = function(pars, data) {
# Extract parameters from the vector
theta = pars
t1<-data[,1]
t2<-data[,2]
# Calculate Negative Log-Likelihood
suppressWarnings(-sum(log(dbvt(t1,t2,c(15,15),theta =  theta,cutoff =  cutoff,truncation =  "left"))))
}
theta22<-0.5
mle = optim(par = 0.5, fn = NLL, data =na.omit(anostd),method = "Brent",lower = 0,upper = 1,
control = list(parscale = c(0.5)))
theta<-mle$par
theta
fractions(theta)
fractions(round(theta,3))
library(RTM)
library(PairedData)
data("Anorexia")
### The z-score of cutoff point
cutoff<-(mean(Anorexia[,1])-95)/sd(Anorexia[,1])
cutoff
### Testing of treatment means under RTM
theta<-0.67
RTM<-RTM.T(data=Anorexia,df=c(15,15),theta=theta,cutoff =  cutoff,truncation =  "left")
RTM
### Estimated RTM effect
RTM$estimate[1]
### Treatment effect (left cutoff), Total effect + RTM
RTM$estimate[2]
library(RTM)
devtools::load_all(".")
getwd()
use_r("RTM.Norm.R")
library(devtools)
use_r("RTM.Norm")
use_r("RTM.Norm.R")
library(RTM)
devtools::load_all(".")
devtools::load_all(".")
library(RTM)
help(dnorm)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(RTM)
LeadExposedChildren <- read.csv("C:/Users/HAIER/Desktop/LeadExposedChildren.txt")
View(LeadExposedChildren)
stats::dnorm()
use_data(LeadExposedChildren)
remove(LeadExposedChildren)
LeadExposedChildren <- read.csv("C:/Users/HAIER/Desktop/LeadExposedChildren.txt")
View(LeadExposedChildren)
use_data(LeadExposedChildren)
devtools::document()
help(LeadExposedChildren)
load("D:/RTM/data/LeadExposedChildren.rda")
use_r("LeadExposedChildren")
help(dnorm)
### Generating bivariate random numbers from t-sistribution
randT <- rbvt(n=1000,df=c(15,9),theta=pi/4)
### Compute the density from complete t-distribution
dbvt(randT[,1],randT[,2],df=c(15,9),theta=pi/4)
r=.5
library(mnormt)
S=matrix(c(1,r,r,1),2,2)
f=function(x,y) dmnorm(cbind(x,y),varcov=S)
vx=seq(-3,3,length=201)
vy=seq(-3,3,length=201)
z=outer(vx,vy,f)
set.seed(1)
X=rmnorm(1500,varcov=S)
X
xhist <- hist(X[,1], plot=FALSE)
xhist
yhist
yhist <- hist(X[,2], plot=FALSE)
yhist
top <- max(c(xhist$density, yhist$density,dnorm(0)))
top
nf <- layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), c(3,1), c(1,3), TRUE)
par(mar=c(3,3,1,1))
image(vx,vy,z,col=rev(heat.colors(101)))
contour(vx,vy,z,col="blue",add=TRUE)
points(X,cex=.2)
par(mar=c(0,3,1,1))
barplot(xhist$density, axes=FALSE, ylim=c(0, top), space=0,col="light green")
lines((density(X[,1])$x-xhist$breaks[1])/diff(xhist$breaks)[1],
dnorm(density(X[,1])$x),col="red")
par(mar=c(3,0,1,1))
barplot(yhist$density, axes=FALSE, xlim=c(0, top), space=0,
horiz=TRUE,col="light green")
lines(dnorm(density(X[,2])$x),(density(X[,2])$x-yhist$breaks[1])/
diff(yhist$breaks)[1],col="red")
dnorm(0)
#create bivariate normal distribution
x     <- sort(randT[,1])
x
y     <- sort(randT[,2])
y
#create bivariate normal distribution
x     <- sort(randT[,1])
y     <- sort(randT[,2])
df    <- c(15, 9)
f     <- function(x, y) dbvt(cbind(x, y), df, pi/4)
z     <- outer(x, y, f)
df
### Generating bivariate random numbers from t-sistribution
randT <- rbvt(n=1000,df=c(15,9),theta=pi/4)
### Compute the density from complete t-distribution
dbvt(randT[,1],randT[,2],df=c(15,9),theta=pi/4)
#create bivariate normal distribution
x     <- sort(randT[,1])
y     <- sort(randT[,2])
df    <- c(15, 9)
f     <- function(x, y) dbvt(cbind(x, y), df, pi/4)
z     <- outer(x, y, f)
z
#create contour plot
contour(x, y, z)
cbind(x, y)
df    <- c(15,9)
df
dbvt(cbind(x,y), df, pi/4)
dbvt(cbind(x,y), df, pi/4)
df
dbvt(cbind(x,y),df=c(15,9),theta= pi/4)
f     <- function(x, y) dbvt(t1,t2,df=c(15,9),theta= pi/4)
f
z     <- outer(x, y, f)
#create bivariate normal distribution
t1     <- sort(randT[,1])
t2     <- sort(randT[,2])
df    <- c(15,9)
f     <- function(x, y) dbvt(t1,t2,df=c(15,9),theta= pi/4)
z     <- outer(x, y, f)
z     <- outer(t1, t2, f)
#create bivariate normal distribution
t1     <- sort(randT[,1])
t2     <- sort(randT[,2])
df    <- c(15,9)
f     <- function(t1, t2) dbvt(t1,t2,df=c(15,9),theta= pi/4)
z     <- outer(t1, t2, f)
#create contour plot
contour(x, y, z)
#create contour plot
contour(x, y, z)
#create contour plot
contour(t1, t2, z)
persp(t1, t2, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
persp(t1, t2, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
persp(t1, t2, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
#create contour plot
contour(t1, t2, z)
contour(t1, t2, z)
### Generating bivariate random numbers from t-sistribution
randT <- rbvt(n=1000,df=c(15,9),theta=pi/4)
### Compute the density from complete t-distribution
dbvt(randT[,1],randT[,2],df=c(15,9),theta=pi/4)
#create bivariate t-distribution
t1     <- sort(randT[,1])
t2     <- sort(randT[,2])
df    <- c(15,9)
f     <- function(t1, t2) dbvt(t1,t2,df=c(15,9),theta= pi/4)
z     <- outer(t1, t2, f)
#create contour plot
contour(t1, t2, z)
2+2
persp(t1, t2, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
2+2
2+2
2+2
h = scatterhist(x,y,'Location','SouthEast',...
'Direction','out',...
x = randn(1000,1);
### Generating bivariate random numbers from t-sistribution
randT <- rbvt(n=1000,df=c(15,9),theta=pi/4)
library(RTM)
### Generating bivariate random numbers from t-sistribution
randT <- rbvt(n=1000,df=c(15,9),theta=pi/4)
### Compute the density from complete t-distribution
dbvt(randT[,1],randT[,2],df=c(15,9),theta=pi/4)
#create bivariate t-distribution
t1     <- sort(randT[,1])
t2     <- sort(randT[,2])
df    <- c(15,9)
f     <- function(t1, t2) dbvt(t1,t2,df=c(15,9),theta= pi/4)
z     <- outer(t1, t2, f)
#create contour plot
contour(t1, t2, z)
### Compute density from truncated distribution
randTrunc<-randT[randT[,1]>=0.5,]
### Compute density from truncated distribution
randTrunc<-randT[randT[,1]>=0.5,]
### create right trucatated bivariate t-distribution
t1.Tr     <- sort(randTrunc[,1])
t2.Tr     <- sort(randTrunc[,2])
df    <- c(15,9)
### create right trucatated bivariate t-distribution
t1.Tr     <- sort(randTrunc[,1])
t2.Tr     <- sort(randTrunc[,2])
df    <- c(15,9)
f     <- function(t1.Tr, t2.Tr) dbvt(t1.Tr,t2.Tr,df=c(15,9),theta= pi/4,cutoff = 0.5,truncation = "right")
z     <- outer(t1.Tr, t2.Tr, f)
#create contour plot
contour(t1.Tr, t2.Tr, z)
library(RTM)
library(RTM)
library(devtools)
devtools::document()
library(RTM)
help(z.test)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
help(glm)
data("LeadExposedChildren")
LeadExposedChildren
#extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$ID=="p",c(3,6)]
treatGrp
#extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$ID=="P",c(3,6)]
treatGrp
#extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$Group=="P",c(3,6)]
treatGrp
cutoff<-(19.7-19.808)/8.269
cutoff
varcov<-matrix(c(8.269^2,0.885*8.269*7.929,0.885*8.269*7.929,7.929^2))
varcov
varcov<-matrix(c(8.269^2,0.885*8.269*7.929,0.885*8.269*7.929,7.929^2),nrow = 2)
varcov
RTM.Norm(treatGrp,mu=mu,Sigma = varcov,cutoff = cutoff,truncation = "right")
mu<-c(19.808,18.168)
varcov<-matrix(c(8.269^2,0.885*8.269*7.929,0.885*8.269*7.929,7.929^2),nrow = 2)
RTM.Norm(treatGrp,mu=mu,Sigma = varcov,cutoff = cutoff,truncation = "right")
RTM.Norm <- function (data,mu,Sigma,delta=0,cutoff,truncation, conf.level = 0.95)
{
#Checking the conditions
p <- length(mu)
if (!all(dim(Sigma) == c(p, p)))
stop("incompatible arguments")
eS <- eigen(Sigma, symmetric = TRUE)
ev <- eS$values
if (!all(ev >= -1e-06 * abs(ev[1L])))
stop("'Sigma' is not positive definite")
if (nrow(data)<3)
stop("The observations must be at least three")
choices <- c("left","right")
alt <- pmatch(truncation, choices)
truncation <- choices[alt]
if (length(truncation) > 1 || is.na(truncation))
stop("truncation must be one \"left\", \"right\"")
if (!missing(conf.level))
if (length(conf.level) != 1 || is.na(conf.level) ||
conf.level < 0 || conf.level > 1)
stop("conf.level must be a number between 0 and 1")
if (truncation=="left") {
mux<-mu[1]
muy<-mu[2]
sigx<-diag(Sigma)[1]
sigy<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(sigx*sigy)
z<-(mu[1]-cutoff)/sqrt(sigx)
SigXY<-(dnorm(z)/pnorm(z))*(z-dnorm(z)/pnorm(z))*(sqrt(sigx)-
cor*sqrt(sigy))^2+sigx+sigy-2*cor*sqrt(sigx*sigy)
RTM<-(sqrt(sigx)-sqrt(sigy)*cor)*dnorm(z)/pnorm(z)
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mean(X-Y+RTM),4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y+RTM,sigma.x =SigXY,mu=delta,conf.level=conf.level)
}else{
mux<-mu[1]
muy<-mu[2]
sigx<-diag(Sigma)[1]
sigy<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(sigx*sigy)
z<-(cutoff-mu[1])/sqrt(sigx)
SigXY<-(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(sigx)-
cor*sqrt(sigy))^2+sigx+sigy-2*cor*sqrt(sigx*sigy)
RTM<-(sqrt(sigx)-sqrt(sigy)*cor)*dnorm(z)/(1-pnorm(z))
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mean(X-Y-RTM),4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y-RTM,sigma.x =SigXY,mu=delta,conf.level=conf.level)
}
#confidence interval
cint<- test$conf.int
#extract p-value, test statistics
pval<- test$p.value
z.stat<-test$statistic
estimates<-c(RTM,delta.est)
names(z.stat)<-"z"
names(estimates)<-c("RTM","Delta")
method<-"***TREATMENT MEANS UNDER REGRESSION TO THE MEAN***"
mu<-delta
names(mu)<-"treatment effect"
dname <- deparse(substitute(data))
output<-list(statistic = z.stat, p.value = pval,alternative="two.sided",
estimate = estimates, null.value = mu, conf.int = cint,
method = method,data.name = dname)
attr(output, "class") <- "htest"
return(output)
}
RTM.Norm(treatGrp,mu=mu,Sigma = varcov,cutoff = cutoff,truncation = "right")
mean(treatGrp[,1]-treatGrp[,2])
#extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$Group=="A",c(3,6)]
treatGrp
#extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$Group=="A",c(3,6)]
cutoff<-19.5
mu<-c(19.808,18.168)
varcov<-matrix(c(8.269^2,0.885*8.269*7.929,0.885*8.269*7.929,7.929^2),nrow = 2)
RTM.Norm(treatGrp,mu=mu,Sigma = varcov,cutoff = cutoff,truncation = "right")
mean(treatGrp[,1]-treatGrp[,2])
nll=function(pars, data) {
# Extract parameters from the vector
n=50
mu = pars[1]
sigm = pars[2]
tr=19.5 ### This is the cut-off point and may be different for different data
# Calculate Negative Log-LIkelihood
n*log(sigm)+(n*varx1+n*(xbar1-mu)^2)/2/sigm^2+n*log(pnorm(tr,mu,sigm))
}
tr=19.5
x1=treatGrp[,1]
x2=treatGrp[,2]
xbar1=mean(x1);xbar1
xbar2=mean(x2);xbar2
varx1=var(x1);varx2=var(x2)
r=cor(x1,x2);r
B=cov(x1,x2)/varx1
mle = optim(par = c(xbar1,sqrt(varx1)), fn = nll,
control = list(parscale = c(mu = 5.5, sigm = .3)))
mux=mle$par[1];sigmaX=mle$par[2];mux;sigmaX
z=(tr-mux)/sigmaX;z
mux
tr
mux
pars[1]
z=(tr-mux)/sigmaX;z
alpa=xbar2;
sigma=sqrt(varx2)*sqrt(1-r^2);
muy=alpa+B*(mux-xbar1);
sigmaY=sqrt(sigma^2+sigmaX^2*B^2);
rh=sigmaX*B/sqrt(sigma^2+sigmaX^2*B^2);
delt=mux-muy;
delt
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/pnorm(z)
RTM
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/(1-pnorm(z))
RTM
delt=mux-muy;
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/(1-pnorm(z))
mux;muy;sigmaX;sigmaY;rh
delt;RTM;
### estimate the RTM effect
RTM<-RTM.Norm(treatGrp,mu=mu,Sigma = varcov,cutoff = cutoff,truncation = "right")
RTM
### Total effect
mean(treatGrp[,1]-treatGrp[,2])
### treatment effect
RTM$estimate[2]
### RTM
RTM$estimate[1]
devtools::document()
devtools::document()
library(RTM)
devtools::load_all(".")
rm(list = c("RTM.Norm"))
devtools::load_all(".")
getwd()
use_r("bv-t.R")
library(devtools)
use_r("bv-t.R")
library(RTM)
getwd()
remove.packages(RTM)
remove.packages("RTM")
#install.packages("devtools")
library(devtools)
install_github("umair1nonly/RTM")
library(RTM)
help("RTM.Norm")
library(RTM)
help(dbvt)
help(dnorm)
?dbvt()
devtools::load_all(".")
library(RTM)
help("RTM.Norm")
help(glm)
help("RTM.Norm")
help(dbvt)
