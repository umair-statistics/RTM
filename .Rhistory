S<-matrix(c(sigmaX^2,rh*sqrt(sigmaX^2*sigmaY^2),
rh*sqrt(sigmaX^2*sigmaY^2),sigmaY^2),nrow=2,byrow=TRUE))
S<-matrix(c(sigmaX^2,rh*sqrt(sigmaX^2*sigmaY^2),
rh*sqrt(sigmaX^2*sigmaY^2),sigmaY^2),nrow=2,byrow=TRUE))
S<-matrix(c(sigmaX^2,rh*sqrt(sigmaX^2*sigmaY^2),
rh*sqrt(sigmaX^2*sigmaY^2),sigmaY^2),nrow=2,byrow=TRUE)
S
RTM.Norm(data = data,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
delt
RTM
S
sigmaX
rh
sigmaX
sigmaY
mux;muy;sigmaX;sigmaY;rh
delt;RTM;
RTM.Norm(data = data,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
nll=function(pars, data) {
# Extract parameters from the vector
n=50
mu = pars[1]
sigm = pars[2]
tr=19.7 ### This is the cut-off point and may be different for different data
# Calculate Negative Log-Likelihood
n*log(sigm)+(n*varx1+n*(xbar1-mu)^2)/2/sigm^2+n*log(1-pnorm(tr,mu,sigm))
}
TCL_Trial <- read.csv("C:/Users/HAIER/Desktop/TCL_Trial.txt")
View(TCL_Trial)
P<-TCL_Trial[TCL_Trial$Group=="P",c(3,6)]
P
TCL_Trial$Group=="P"
P<-TCL_Trial[TCL_Trial$Group=="P",c(3,6)]
P
TCL_Trial$Group
table(TCL_Trial$Group)
TCL_Trial
P<-TCL_Trial[TCL_Trial$Group=="P",c(3,6)]
P
nrow(P)
A<-TCL_Trial[TCL_Trial$Group=="A",c(3,6)]
### Estimate using traditional method
tr=19.7
### Estimate using traditional method
tr=min(A$Week_0)
tr
x1=A$Week_0
x2=A$Week_6
xbar1=mean(x1);xbar1
xbar2=mean(x2);xbar2
varx1=var(x1);varx2=var(x2)
r=cor(x1,x2);r
B=cov(x1,x2)/varx1
mle = optim(par = c(xbar1,sqrt(varx1)), fn = nll,
control = list(parscale = c(mu = 1, sigm = .3)))
mux=mle$par[1];sigmaX=mle$par[2];mux;sigmaX
tr
z=(tr-mux)/sigmaX;z
alpa=xbar2;
sigma=sqrt(varx2)*sqrt(1-r^2);
muy=alpa+B*(mux-xbar1);
sigmaY=sqrt(sigma^2+sigmaX^2*B^2);
rh=sigmaX*B/sqrt(sigma^2+sigmaX^2*B^2);
delt=mux-muy;
delt=mux-muy;
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/pnorm(z)
mux;muy;sigmaX;sigmaY;rh
delt;RTM;
sigmaX
sigmaY
mu<-c(mux,muy)
sigmaX
sigmaX^2
rh*sqrt(sigmaX^2*sigmaY^2)
sigmaY^2
Sig<-matrix(c(62.48251,56.96942,56.96942,116.4801),nrow = 2,byrow = TRUE)
A
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
rh
RTM.Norm <-
function(data, mu, Sigma, delta=0, cutoff, truncation,
conf.level = 0.95)
{
#Checking the conditions
p <- length(mu)
if (!all(dim(Sigma) == c(p, p)))
stop("incompatible arguments")
eS <- eigen(Sigma, symmetric = TRUE)
ev <- eS$values
if (!all(ev >= -1e-06 * abs(ev[1L])))
stop("'Sigma' is not positive definite")
if (nrow(data)<3)
stop("The observations must be at least three")
choices <- c("left","right")
alt <- pmatch(truncation, choices)
truncation <- choices[alt]
if (length(truncation) > 1 || is.na(truncation))
stop("truncation must be one \"left\", \"right\"")
if (!missing(conf.level))
if (length(conf.level) != 1 || is.na(conf.level) ||
conf.level < 0 || conf.level > 1)
stop("conf.level must be a number between 0 and 1")
if (truncation=="left") {
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sigma)[1]
var.y<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
z<-(mu[1]-cutoff)/sqrt(var.x)
Var.XY<-(dnorm(z)/pnorm(z))*(z-dnorm(z)/pnorm(z))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/pnorm(z)
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mux-muy,4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y+RTM,sigma.x =Var.XY,mu=delta,conf.level=conf.level)
}else{
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sigma)[1]
var.y<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
z<-(cutoff-mu[1])/sqrt(var.x)
Var.XY<-(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mux-muy,4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y-RTM,sigma.x =Var.XY,mu=delta,conf.level=conf.level)
}
#confidence interval
cint<- test$conf.int
#extract p-value, test statistics
pval<- test$p.value
z.stat<-test$statistic
estimates<-c(RTM,delta.est)
names(z.stat)<-"z"
names(estimates)<-c("RTM","Delta")
method<-"***TREATMENT MEANS UNDER REGRESSION TO THE MEAN***"
mu<-delta
names(mu)<-"treatment effect"
dname <- deparse(substitute(data))
output<-list(statistic = z.stat, p.value = pval,alternative="two.sided",
estimate = estimates, null.value = mu, conf.int = cint,
method = method,data.name = dname)
attr(output, "class") <- "htest"
return(output)
}
mu<-c(mux,muy)
Sig<-matrix(c(62.48251,56.96942,56.96942,116.4801),nrow = 2,byrow = TRUE)
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
rh
delt;RTM;  #5.297114 #0.6368395
mu<-c(mux,muy)
mu
mux
muy
sigmaX
sigmaY
Sig
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
mux<-mu[1]
mux
muy<-mu[2]
var.x<-diag(Sig)[1]
var.y<-diag(Sig)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
cor
rh
var.x
rh
z<-(cutoff-mu[1])/sqrt(var.x)
z
z=(tr-mux)/sigmaX;z
cutoff
tr
z<-(tr-mu[1])/sqrt(var.x)
z
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM
cor
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM<-round(RTM,4)
RTM
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sig)[1]
var.y<-diag(Sig)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
z<-(tr-mu[1])/sqrt(var.x)
Var.XY<-(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM
cor<-(Sig[2,1])/sqrt(var.x*var.y)
cor
z<-(tr-mu[1])/sqrt(var.x)
Var.XY<-(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sig)[1]
var.y<-diag(Sig)[2]
cor<-(Sig[2,1])/sqrt(var.x*var.y)
cor
rh
z
z=(tr-mux)/sigmaX;z
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/(1-pnorm(z))
mux;muy;sigmaX;sigmaY;rh
delt;RTM;  #5.297114 #0.6368395
nll=function(pars, data) {
# Extract parameters from the vector
n=50
mu = pars[1]
sigm = pars[2]
tr=19.7 ### This is the cut-off point and may be different for different data
# Calculate Negative Log-Likelihood
n*log(sigm)+(n*varx1+n*(xbar1-mu)^2)/2/sigm^2+n*log(1-pnorm(tr,mu,sigm))
}
P<-TCL_Trial[TCL_Trial$Group=="P",c(3,6)]
A<-TCL_Trial[TCL_Trial$Group=="A",c(3,6)]
### Estimate using traditional method
tr=min(A$Week_0)
x1=A$Week_0
x2=A$Week_6
xbar1=mean(x1);xbar1
xbar2=mean(x2);xbar2
varx1=var(x1);varx2=var(x2)
r=cor(x1,x2);r
B=cov(x1,x2)/varx1
mle = optim(par = c(xbar1,sqrt(varx1)), fn = nll,
control = list(parscale = c(mu = 1, sigm = .3)))
mux=mle$par[1];sigmaX=mle$par[2];mux;sigmaX
z=(tr-mux)/sigmaX;z
alpa=xbar2;
sigma=sqrt(varx2)*sqrt(1-r^2);
muy=alpa+B*(mux-xbar1);
sigmaY=sqrt(sigma^2+sigmaX^2*B^2);
rh=sigmaX*B/sqrt(sigma^2+sigmaX^2*B^2);
delt=mux-muy;
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/(1-pnorm(z))
mux;muy;sigmaX;sigmaY;rh
delt;RTM;  #5.297114 #0.4808392
mu<-c(mux,muy)
Sig<-matrix(c(62.48251,56.96942,56.96942,116.4801),nrow = 2,byrow = TRUE)
RTM.Norm(data = A,mu=mu,Sigma = Sig,truncation = "right",cutoff = 19.7)
mux
muy
sigmaX
sigmaY
rh
mean(A$Week_0-A$Week_6)
5.297114+0.4808392
### Estimate using traditional method
tr=min(P$Week_0)
tr
x1=P$Week_0
x2=P$Week_6
xbar1=mean(x1);xbar1
xbar2=mean(x2);xbar2
varx1=var(x1);varx2=var(x2)
r=cor(x1,x2);r
B=cov(x1,x2)/varx1
mle = optim(par = c(xbar1,sqrt(varx1)), fn = nll,
control = list(parscale = c(mu = 1, sigm = .3)))
mux=mle$par[1];sigmaX=mle$par[2];mux;sigmaX
z=(tr-mux)/sigmaX;z
alpa=xbar2;
sigma=sqrt(varx2)*sqrt(1-r^2);
muy=alpa+B*(mux-xbar1);
sigmaY=sqrt(sigma^2+sigmaX^2*B^2);
rh=sigmaX*B/sqrt(sigma^2+sigmaX^2*B^2);
delt=mux-muy;
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/(1-pnorm(z))
mux;muy;sigmaX;sigmaY;rh
delt;RTM;  #5.297114 #0.4808392
mean(P$Week_0-P$Week_6)
1.530701+1.095473
###### Given Parameters
mu=c(20.096,14.887)
0.684*sqrt(8.251^2*11.006^2)
S=matrix(c(8.251^2,62.11439,62.11439,11.006^2),byrow = TRUE,nrow = 2)
S
A
RTM.Norm(data = A,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
mean(A$Week_0-A$Week_6)
0.5549+5.2090
mu=c(19.808,18.168)
0.885*sqrt(8.269^2*7.929^2)
S=matrix(c(8.269^2,58.02494,58.02494,7.929^2),byrow = TRUE,nrow = 2)
RTM.Norm(data = P,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
mean(A$Week_0-A$Week_6)
mean(P$Week_0-P$Week_6)
0.9884+1.6400
###### Given Parameters
mu=c(20.096,14.887)
S=matrix(c(8.251^2,62.11439,62.11439,11.006^2),byrow = TRUE,nrow = 2)
RTM.Norm(data = A,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
A$Week_0-A$Week_6
t.test(A$Week_0-A$Week_6)
t.test(A$Week_0,A$Week_6,paired = TRUE)
###### Given Parameters
mu=c(20.096,14.887)
S=matrix(c(8.251^2,62.11439,62.11439,11.006^2),byrow = TRUE,nrow = 2)
RTM.Norm(data = A,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
mean(A$Week_0-A$Week_6)
var(A$Week_0-A$Week_6)
z
mux
z=(19.7-20.096)/8.251;z
(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(8.251^2)-
0.684*sqrt(11.006^2))^2+(8.251^2+11.006^2-2*0.684*sqrt(8.251*11.006))
z
var(A$Week_0-A$Week_6)
(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(8.251^2)-
0.684*sqrt(11.006^2))^2+(8.251^2+11.006^2-2*0.684*sqrt(8.251*11.006))
t.test(A$Week_0,A$Week_6,paired = TRUE)
FN<-var(A$Week_0-A$Week_6)
z.test(A$Week_0-A$Week_6,var.x=FN)
z.test(A$Week_0-A$Week_6,sigma.x =FN)
FN
z.test(A$Week_0-A$Week_6,sigma.x =sqrt(FN))
(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(8.251^2)-
0.684*sqrt(11.006^2))^2+(8.251^2+11.006^2-2*0.684*sqrt(8.251*11.006))
z.test(A$Week_0-A$Week_6,sigma.x =sqrt(175.8476))
RTM.Norm <-
function(data, mu, Sigma, delta=0, cutoff, truncation,
conf.level = 0.95)
{
#Checking the conditions
p <- length(mu)
if (!all(dim(Sigma) == c(p, p)))
stop("incompatible arguments")
eS <- eigen(Sigma, symmetric = TRUE)
ev <- eS$values
if (!all(ev >= -1e-06 * abs(ev[1L])))
stop("'Sigma' is not positive definite")
if (nrow(data)<3)
stop("The observations must be at least three")
choices <- c("left","right")
alt <- pmatch(truncation, choices)
truncation <- choices[alt]
if (length(truncation) > 1 || is.na(truncation))
stop("truncation must be one \"left\", \"right\"")
if (!missing(conf.level))
if (length(conf.level) != 1 || is.na(conf.level) ||
conf.level < 0 || conf.level > 1)
stop("conf.level must be a number between 0 and 1")
if (truncation=="left") {
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sigma)[1]
var.y<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
z<-(mu[1]-cutoff)/sqrt(var.x)
Var.XY<-(dnorm(z)/pnorm(z))*(z-dnorm(z)/pnorm(z))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/pnorm(z)
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mux-muy,4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y+RTM,sigma.x =sqrt(Var.XY),mu=delta,conf.level=conf.level)
}else{
mux<-mu[1]
muy<-mu[2]
var.x<-diag(Sigma)[1]
var.y<-diag(Sigma)[2]
cor<-(Sigma[2,1])/sqrt(var.x*var.y)
z<-(cutoff-mu[1])/sqrt(var.x)
Var.XY<-(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(var.x)-
cor*sqrt(var.y))^2+(var.x+var.y-2*cor*sqrt(var.x*var.y))
RTM<-(sqrt(var.x)-sqrt(var.y)*cor)*dnorm(z)/(1-pnorm(z))
RTM<-round(RTM,4)
#extract pre and post variables
X<-data[,1]
Y<-data[,2]
#compute the treatment effect
delta.est<-round(mux-muy,4)
#test the treatment effect by eliminating RTM
test<- z.test(X-Y-RTM,sigma.x =sqrt(Var.XY),mu=delta,conf.level=conf.level)
}
#confidence interval
cint<- test$conf.int
#extract p-value, test statistics
pval<- test$p.value
z.stat<-test$statistic
estimates<-c(RTM,delta.est)
names(z.stat)<-"z"
names(estimates)<-c("RTM","Delta")
method<-"***TREATMENT MEANS UNDER REGRESSION TO THE MEAN***"
mu<-delta
names(mu)<-"treatment effect"
dname <- deparse(substitute(data))
output<-list(statistic = z.stat, p.value = pval,alternative="two.sided",
estimate = estimates, null.value = mu, conf.int = cint,
method = method,data.name = dname)
attr(output, "class") <- "htest"
return(output)
}
###### Given Parameters
mu=c(20.096,14.887)
S=matrix(c(8.251^2,62.11439,62.11439,11.006^2),byrow = TRUE,nrow = 2)
RTM.Norm(data = A,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
mean(A$Week_0-A$Week_6)
FN<-var(A$Week_0-A$Week_6)
z=(19.7-20.096)/8.251;z
(dnorm(z)/(1-pnorm(z)))*(z-dnorm(z)/(1-pnorm(z)))*(sqrt(8.251^2)-
0.684*sqrt(11.006^2))^2+(8.251^2+11.006^2-2*0.684*sqrt(8.251*11.006))
###### Given Parameters
mu=c(20.096,14.887)
S=matrix(c(8.251^2,62.11439,62.11439,11.006^2),byrow = TRUE,nrow = 2)
RTM.Norm(data = A,mu=mu,Sigma = S,truncation = "right",cutoff = 19.7)
nll=function(pars, data) {
# Extract parameters from the vector
n=17
mu = pars[1]
sigm = pars[2]
tr=95 ### This is the cut-off point and may be different for different data
# Calculate Negative Log-Likelihood
n*log(sigm)+(n*varx1+n*(xbar1-mu)^2)/2/sigm^2+n*log(pnorm(tr,mu,sigm))
}
tr=95
x1=Anorexia$Prior
x2=Anorexia$Post
xbar1=mean(x1);xbar1
xbar2=mean(x2);xbar2
varx1=var(x1);varx2=var(x2)
r=cor(x1,x2);r
B=cov(x1,x2)/varx1
mle = optim(par = c(xbar1,sqrt(varx1)), fn = nll,
control = list(parscale = c(mu = 1, sigm = .3)))
mux=mle$par[1];sigmaX=mle$par[2];mux;sigmaX
z=(mux-tr)/sigmaX;z
alpa=xbar2;
sigma=sqrt(varx2)*sqrt(1-r^2);
muy=alpa+B*(mux-xbar1);
sigmaY=sqrt(sigma^2+sigmaX^2*B^2);
rh=sigmaX*B/sqrt(sigma^2+sigmaX^2*B^2);
delt=mux-muy;
RTM=(sigmaX-sigmaY*rh)*dnorm(z)/pnorm(z)
mux;muy;sigmaX;sigmaY;rh
delt;RTM;
SigXY<-(dnorm(z)/pnorm(z))*(z-dnorm(z)/pnorm(z))*(sqrt(sigmaX^2)-
rh*sqrt(sigmaY^2))^2+sigmaX^2+sigmaY^2-2*rh*sqrt(sigmaX^2*sigmaY^2)
t.test(Anorexia[,1]-Anorexia[,2]+RTM) # p-value = 0.003069
z.test(Anorexia[,1]-Anorexia[,2]+RTM,sigma.x = sqrt(SigXY)) # p-value = 0.6071
t.test(Anorexia[,1],Anorexia[,2],paired = TRUE)
0.0007003/0.0003427
load("D:/RTM_Package/RTM/data/LeadExposedChildren.rda")
write.rda
write.rda
data("LeadExposedChildren")
### extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$Group=="A",c(3,6)]
### cutoff point it is different for different studies
cutoff<-19.7
### define mean and variance covariance matrix
mu<-c(20.096,14.887)
varcov<-matrix(c(8.251^2,0.684*8.251*11.006,
0.684*8.251*11.006,8.251^2),nrow = 2)
### estimate the RTM effect
RTM<-RTM.Norm(data=treatGrp,mu=mu,Sigma = varcov,
cutoff = cutoff,truncation = "right")
library(RTM)
library(RTM)
data("LeadExposedChildren")
### extract treatment group, baseline and followup measurement
treatGrp<- LeadExposedChildren[LeadExposedChildren$Group=="A",c(3,6)]
### cutoff point it is different for different studies
cutoff<-19.7
### define mean and variance covariance matrix
mu<-c(20.096,14.887)
varcov<-matrix(c(8.251^2,0.684*8.251*11.006,
0.684*8.251*11.006,8.251^2),nrow = 2)
### estimate the RTM effect
RTM<-RTM.Norm(data=treatGrp,mu=mu,Sigma = varcov,
cutoff = cutoff,truncation = "right")
RTM
### Total effect
mean(treatGrp[,1]-treatGrp[,2])
### treatment effect
RTM$estimate[2]
### RTM
RTM$estimate[1]
devtools::load_all(".")
library(RTM)
devtools::load_all(".")
library(RTM)
devtools::load_all(".")
library(RTM)
library(RTM)
devtools::load_all(".")
